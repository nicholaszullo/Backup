// CS 0445 Spring 2019
// Read this class and its comments very carefully to make sure you implement
// the class properly.  Note the items that are required and that cannot be
// altered!  Generally speaking you will implement your MyStringBuilder using
// a singly linked list of nodes.  See more comments below on the specific
// requirements for the class.

// For more details on the general functionality of most of these methods, 
// see the specifications of the similar method in the StringBuilder class. 
/*
	cant do conversions between string to char array to stringbuilder to call other methods

	
	--------TO DO LIST------------
	CAN I CONVERT EVERYTHING TO MYSTRINGBUILDER TO DO THE OPERATIONS? OR NEED TO CREATE NODES IN METHOD
	Make things more efficient? reverse, indexOf 
	Add more comments
	Clean things up
	
	
*/ 
public class MyStringBuilder
{
	// These are the only three instance variables you are allowed to have.
	// See details of CNode class below.  In other words, you MAY NOT add
	// any additional instance variables to this class.  However, you may
	// use any method variables that you need within individual methods.
	// But remember that you may NOT use any variables of any other
	// linked list class or of the predefined StringBuilder or 
	// or StringBuffer class in any place in your code.  You may only use the
	// String class where it is an argument or return type in a method.
	private CNode firstC;	// reference to front of list.  This reference is necessary
							// to keep track of the list
	private CNode lastC; 	// reference to last node of list.  This reference is
							// necessary to improve the efficiency of the append()
							// method
	private int length;  	// number of characters in the list

	// You may also add any additional private methods that you need to
	// help with your implementation of the public methods.

	// Create a new MyStringBuilder initialized with the chars in String s
	public MyStringBuilder(String s)
	{
		
		if (s == null || s.length() == 0) // Special case for empty String
		{					 			  // or null reference
			firstC = null;
			lastC = null;
			length = 0;
		}
		else
		{
			// Create front node to get started
			firstC = new CNode(s.charAt(0));
			length = 1;
			CNode currNode = firstC;
			// Create remaining nodes, copying from String.  Note
			// how each new node is simply added to the end of the
			// previous one.  Trace this to see what is going on.
			for (int i = 1; i < s.length(); i++)
			{
				CNode newNode = new CNode(s.charAt(i));
				currNode.next = newNode;
				currNode = newNode;
				length++;
			}
			lastC = currNode;
		}
		
	}

	// Create a new MyStringBuilder initialized with the chars in array s
	public MyStringBuilder(char [] s)			//Same as String
	{
		if (s == null || s.length == 0) // Special case for empty String
		{					 			  // or null reference
			firstC = null;
			lastC = null;
			length = 0;
		}
		
		firstC = new CNode(s[0]);
		length = 1;
		CNode currNode = firstC;
		for (int i = 1; i < s.length; i++){
			CNode newNode = new CNode(s[i]);
			currNode.next = newNode;
			currNode = newNode;
			length++;
		}
		lastC = currNode;
	}

	// Create a new empty MyStringBuilder
	public MyStringBuilder()
	{
		
		this(new String());			//Call string constructor with null reference
	}

	// Append MyStringBuilder b to the end of the current MyStringBuilder, and
	// return the current MyStringBuilder.  Be careful for special cases!
	public MyStringBuilder append(MyStringBuilder b)
	{
		CNode currNode;											
		for (currNode = b.firstC; currNode != null; currNode = currNode.next){
			lastC.next = new CNode(currNode.data);					//Create new nodes, cant link other nodes or 2 MSBs point to the same thing
			lastC = lastC.next;
		}
		length += b.length;
		return this;
	}


	// Append String s to the end of the current MyStringBuilder, and return
	// the current MyStringBuilder.  Be careful for special cases!
	public MyStringBuilder append(String s)
	{
		MyStringBuilder other = new MyStringBuilder(s);
		
		if (firstC == null){					//Special case if MSB is empty put new string at begining
			firstC = other.firstC;
			lastC = other.lastC;
		} else{
			lastC.next = other.firstC;				//Normally just link end of MSB to start of new string
			lastC = other.lastC;					//update lastC to be the new string lastC
		}
		
		length += s.length();
		return this;

	}

	// Append char array c to the end of the current MyStringBuilder, and
	// return the current MyStringBuilder.  Be careful for special cases!
	public MyStringBuilder append(char [] c)
	{
		MyStringBuilder other = new MyStringBuilder(c);
		
		if (firstC == null){					//Special case if this is empty put new string at begining
			firstC = other.firstC;
			lastC = other.lastC;
		} else{
			lastC.next = other.firstC;				//Normally just add new string to end of list
			lastC = other.lastC;
		}
		
		length += other.length;
		return this;
	}

	// Append char c to the end of the current MyStringBuilder, and
	// return the current MyStringBuilder.  Be careful for special cases!
	public MyStringBuilder append(char c)
	{
															//HOW TO ADD ' ' ?
		lastC.next = new CNode(c);								//Create a new char Node and add to the end of MSB
		lastC = lastC.next;
		length++;
		return this;
	}

	// Return the character at location "index" in the current MyStringBuilder.
	// If index is invalid, throw an IndexOutOfBoundsException.
	public char charAt(int index)
	{
		if (index >= length){
			throw new IndexOutOfBoundsException("Index given is not a valid location");
		} else {
			CNode currNode = firstC;
			for (int i = 0; i < index; i++){				//Find the node requested and return its data
				currNode = currNode.next;
			}
			return currNode.data;
		}
	}

	// Delete the characters from index "start" to index "end" - 1 in the
	// current MyStringBuilder, and return the current MyStringBuilder.
	// If "start" is invalid or "end" <= "start" do nothing (just return the
	// MyStringBuilder as is).  If "end" is past the end of the MyStringBuilder, 
	// only remove up until the end of the MyStringBuilder. Be careful for 
	// special cases!
	public MyStringBuilder delete(int start, int end)
	{
		if (start >= length || end <= start)			//If parameters are invailid, return unmodified MSB
			return this;
		if (end > length)
			end = length;
		
		
		CNode currNode = firstC;
		CNode startC = null;
		CNode endC = null;
		for (int i = 0; i <= end && currNode != null; i++){			//Link the node from before start to the node after end to make data inside logically deleted
			if (i == start-1)										//Node previous to nodes being deleted
				startC = currNode;
			if (i == end)
				endC = currNode;									//Node after deletion nodes
			
			currNode = currNode.next;
		}
		
		if (start == 0){											//2 special cases
			firstC = endC;											//New start of list is where deletion stops
		}else if (end == length){
			lastC = startC;											//New end is where delection starts
			lastC.next = null;										//Unlink new end from the rest of the list
		}else {
			startC.next = endC;										//Set the list to unlink from data in remove area
				
		}

		length -= (end - start);									//Update length to account for # of characters removed
		return this;	
	}

	// Delete the character at location "index" from the current
	// MyStringBuilder and return the current MyStringBuilder.  If "index" is
	// invalid, do nothing (just return the MyStringBuilder as is).
	// Be careful for special cases!
	public MyStringBuilder deleteCharAt(int index)
	{
		if (index > length)				//Do nothing if index is greater than length
			return this;
		
		CNode currNode = firstC;
		CNode startC = null;
		CNode endC = null;
		for (int i = 0; i <= index; i++){
			if (i == index-1)
				startC = currNode;
			if (i == index)
				endC = currNode.next;
			
			currNode = currNode.next;
		}
		
		
		if (index == 0){											//2 special cases
			firstC = endC;											//New start of list is where deletion stops
		}else if (index == length){
			lastC = startC;											//New end is where delection starts
			lastC.next = null;										//Unlink new end from the rest of the list
		}else {
			startC.next = endC;										//Set the list to unlink from data in remove area
				
		}

		length--;													//Update length
		return this;
	}

	// Find and return the index within the current MyStringBuilder where
	// String str first matches a sequence of characters within the current
	// MyStringBuilder.  If str does not match any sequence of characters
	// within the current MyStringBuilder, return -1.  Think carefully about
	// what you need to do for this method before implementing it.
	public int indexOf(String str)
	{
		MyStringBuilder other = new MyStringBuilder(str);
		int k = 0;
		for (CNode currNode = firstC; currNode != null; currNode = currNode.next){
			CNode window = currNode;
			int i = 0;
			for (CNode compare = other.firstC; compare != null; compare = compare.next){
				if (compare.data != window.data)							
					break;													
				//special case if found at the very end 					
				if (window.next == null)									//If not, check if next letter matches first letter from this and repeat
					break;
					
				window = window.next;
				i++;
				
				if (i == other.length)										
					return k;												
			}			
			k++;
		}

		return -1;
	}


	public int indexOf(String str){
		int k = 0;
		for (CNode n = firstC; n != null; n= n.next){
			if (n.data == str.charAt(0)){									//Checks if the first letter matches the first letter from this
				int i = 1;													//If it does, check if next letter matches next letter from this
				for (CNode pattern = n.next; pattern != null; pattern = pattern.next){
					if (pattern.data != str.charAt(i++))					
						break;
					if (i == str.length())									//i is length of window, if it is the size of str then str is found in this
						return k;											//k is the current position of currNode, the start of the sliding window
				}
			}
			k++;
		}
		
		return -1;
		
	}


	// Insert String str into the current MyStringBuilder starting at index
	// "offset" and return the current MyStringBuilder.  if "offset" == 
	// length, this is the same as append.  If "offset" is invalid
	// do nothing.
	public MyStringBuilder insert(int offset, String str)
	{
		if (offset >= length)			//If offset is bigger than length, do nothing
			return this;
		
		CNode currNode = firstC;
		for (int i = 0; i < offset-1; i++){
			currNode = currNode.next;
		}
		MyStringBuilder other = new MyStringBuilder(str);
		
		if (offset == 0){
			other.lastC.next = firstC; 
			firstC = other.firstC;	
		}else {
			other.lastC.next = currNode.next;			//Link end of new string to rest of original string
			currNode.next = other.firstC;			//Link start of new string to offset location
		}
		
		length += other.length;
		return this;
	}

	// Insert character c into the current MyStringBuilder at index
	// "offset" and return the current MyStringBuilder.  If "offset" ==
	// length, this is the same as append.  If "offset" is invalid, 
	// do nothing.
	public MyStringBuilder insert(int offset, char c)
	{
		if (offset > length)			//If offset is bigger than length, do nothing
			return this;
		CNode currNode = firstC;
		for (int i = 0; i < offset-1; i++){
			currNode = currNode.next;
		}
		CNode other = new CNode(c);
		if (offset == 0){
			other.next = firstC; 
			firstC = other;	
		}else {
			other.next = currNode.next;			//Link end of new string to rest of original string
			currNode.next = other;			//Link start of new string to offset location
		}
		length++;
		return this;
	}

	// Insert char array c into the current MyStringBuilder starting at index
	// index "offset" and return the current MyStringBuilder.  If "offset" is
	// invalid, do nothing.
	public MyStringBuilder insert(int offset, char [] c)
	{
		if (offset >= length)			//If offset is bigger than length, do nothing
			return this;
		
		CNode currNode = firstC;
		for (int i = 0; i < offset-1; i++){
			currNode = currNode.next;
		}
		
		MyStringBuilder other = new MyStringBuilder(c);
		
		if (offset == 0){
			other.lastC.next = firstC; 
			firstC = other.firstC;	
		}else {
			other.lastC.next = currNode.next;			//Link end of new string to rest of original string
			currNode.next = other.firstC;			//Link start of new string to offset location
		}
		
		length += other.length;
		return this;
	}

	// Return the length of the current MyStringBuilder
	public int length()
	{
		return length;
	}

	// Delete the substring from "start" to "end" - 1 in the current
	// MyStringBuilder, then insert String "str" into the current
	// MyStringBuilder starting at index "start", then return the current
	// MyStringBuilder.  If "start" is invalid or "end" <= "start", do nothing.
	// If "end" is past the end of the MyStringBuilder, only delete until the
	// end of the MyStringBuilder, then insert.  This method should be done
	// as efficiently as possible.  In particular, you may NOT simply call
	// the delete() method followed by the insert() method, since that will
	// require an extra traversal of the linked list.
	public MyStringBuilder replace(int start, int end, String str)
	{
		if (start < 0 || end <= start)
			return this;
		if (end > length)
			end = length;
	
		//get to start, save node, get to end, save node, link string to start, link string end to end 
		CNode currNode = firstC;
		CNode startC = null;
		CNode endC = null;
		for (int i = 0; i <= end && currNode != null; i++){			//Link the node from before start to the node after end to make data inside logically deleted
			if (i == start-1)										//Node previous to nodes being deleted
				startC = currNode;
			if (i == end)
				endC = currNode;									//Node after deletion nodes
			
			currNode = currNode.next;
		}
		MyStringBuilder other = new MyStringBuilder(str);
		
		
		if (start == 0){											//2 special cases
			other.lastC.next = firstC;								//Link end of first string to begining of current string
			firstC = other.firstC;									//Make new front the new string
			
		}else if (length == end){									//If new string is now end, dont update last.next because it is null
			startC.next = other.firstC;
			lastC = other.lastC;	
		} else {
			startC.next = other.firstC;
			other.lastC.next = endC;
		}		
		
		length = length - (end - start) + other.length;
		return this;
	}

	// Reverse the characters in the current MyStringBuilder and then
	// return the current MyStringBuilder.
	public MyStringBuilder reverse()
	{
		char[] reversed = new char[length];
		int i = length-1;
		CNode currNode = firstC;
		while (currNode != null)
		{
			reversed[i--] = currNode.data;					//Add data from begining of list to end of array, then move down array and up list
			currNode = currNode.next;
		}
		MyStringBuilder other = new MyStringBuilder(reversed);
		firstC = other.firstC;
		lastC = other.lastC;
		
		return this;	//Return MSB representaion of reversed
	}
	
	// Return as a String the substring of characters from index "start" to
	// index "end" - 1 within the current MyStringBuilder
	public String substring(int start, int end)
	{
		if (start < 0 || end <= start)
			return toString();
		
		char[] temp = new char[end-start];
		CNode currNode = firstC;
		int count = 0;
		for (int i = 0; i < end; i++){					//Traverse down list, when arrive at start, save letters until end 
			if (i >= start && i < end){
				temp[count++] = currNode.data;
			}
			currNode = currNode.next;
		}
	
		return new String(temp);
	}

	// Return the entire contents of the current MyStringBuilder as a String
	public String toString()
	{
		char [] c = new char[length];
		int i = 0;
		CNode currNode = firstC;
		while (currNode != null)
		{
			
			c[i++] = currNode.data;
			currNode = currNode.next;
		}
		return new String(c);
	}

	// You must use this inner class exactly as specified below.  Note that
	// since it is an inner class, the MyStringBuilder class MAY access the
	// data and next fields directly.
	private class CNode
	{
		private char data;
		private CNode next;

		public CNode(char c)
		{
			data = c;
			next = null;
		}

		public CNode(char c, CNode n)
		{
			data = c;
			next = n;
		}
	}
}

